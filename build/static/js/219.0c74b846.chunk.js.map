{"version":3,"file":"static/js/219.0c74b846.chunk.js","mappings":"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","sources":["Views/Postlogin/Home/Pending/CustomerDetails/Captureorder/index.js"],"sourcesContent":["import { Button } from \"@cloudscape-design/components\"; \r\nimport React, { useState, useRef, useEffect } from \"react\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport Icon from \"@cloudscape-design/components/icon\";\r\nimport { useDispatch } from \"react-redux\"; // Import useDispatch\r\nimport { uploadFile } from \"Redux-Store/Uploadimage/UploadThunk\";\r\n\r\nconst VerifiedOrder = () => {\r\n  const { runsheetId, orderId } = useParams(); // Extract dynamic route params\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch(); // Initialize dispatch\r\n  const [visible, setVisible] = useState(false);\r\n  const [isCaptured, setIsCaptured] = useState(false);\r\n  const [photo, setPhoto] = useState(null);\r\n  const [isPhotoTaken, setIsPhotoTaken] = useState(false);\r\n  const videoRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n\r\n  const startCamera = async () => {\r\n    try {\r\n      const stream = await navigator.mediaDevices.getUserMedia({\r\n        video: { facingMode: \"environment\" },\r\n      });\r\n      if (videoRef.current) {\r\n        videoRef.current.srcObject = stream;\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Error accessing the camera: \", err);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    startCamera();\r\n  \r\n    // Create a local variable to store the current videoRef value\r\n    const currentVideoRef = videoRef.current;\r\n  \r\n    return () => {\r\n      if (currentVideoRef) {\r\n        const stream = currentVideoRef.srcObject;\r\n        const tracks = stream?.getTracks();\r\n        tracks?.forEach((track) => track.stop());\r\n      }\r\n    };\r\n  }, []);\r\n  \r\n\r\n  const handleTakePhoto = () => {\r\n    if (!isPhotoTaken) {\r\n      if (videoRef.current && canvasRef.current) {\r\n        const context = canvasRef.current.getContext(\"2d\");\r\n        canvasRef.current.width = videoRef.current.videoWidth;\r\n        canvasRef.current.height = videoRef.current.videoHeight;\r\n        context.drawImage(\r\n          videoRef.current,\r\n          0,\r\n          0,\r\n          canvasRef.current.width,\r\n          canvasRef.current.height\r\n        );\r\n        const photoUrl = canvasRef.current.toDataURL(\"image/jpeg\");\r\n        setPhoto(photoUrl);\r\n        setIsCaptured(true);\r\n        setIsPhotoTaken(true);\r\n      }\r\n      setVisible(true); \r\n      setTimeout(() => {\r\n        setVisible(false);\r\n      }, 2000);\r\n    } else {\r\n      setPhoto(null);\r\n      setIsPhotoTaken(false);\r\n      setIsCaptured(false);\r\n      startCamera(); \r\n    }\r\n  };\r\n\r\n  const handleVerifyClick = async () => {\r\n    if (photo && isCaptured) {\r\n      const blob = await fetch(photo).then(res => res.blob());\r\n      const file = new File([blob], \"captured-photo.jpg\", { type: \"image/jpeg\" });\r\n  \r\n      dispatch(uploadFile(file)).then((result) => {\r\n        if (result.meta.requestStatus === \"fulfilled\") {\r\n          // The payload is the URL directly, no need for result.payload.url\r\n          const uploadedUrl = result.payload;\r\n  \r\n          // Pass the URL as a route parameter if it's valid\r\n          navigate(\r\n            `/app/home/runsheet/${runsheetId}/customer-details/order/${orderId}/captured-verify/${encodeURIComponent(uploadedUrl)}`\r\n          );\r\n        } else {\r\n          alert(\"Upload failed. Please try again.\");\r\n        }\r\n      });\r\n    } else {\r\n      alert(\"No photo captured yet.\");\r\n    }\r\n  };\r\n  \r\n    \r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        position: \"absolute\",\r\n        top: 0,\r\n        left: 0,\r\n        right: 0,\r\n        bottom: 0,\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        height: \"100%\",\r\n        flexDirection: \"column\",\r\n        backgroundColor: \"#000716\",\r\n      }}\r\n    >\r\n      {!isPhotoTaken && (\r\n        <div\r\n          style={{\r\n            height: \"88vh\",\r\n            width: \"100%\",\r\n            backgroundColor: \"#000716\",\r\n          }}\r\n        >\r\n          <video\r\n            ref={videoRef}\r\n            autoPlay\r\n            playsInline\r\n            style={{\r\n              width: \"100%\",\r\n              height: \"100%\",\r\n              position: \"absolute\",\r\n              left: 0,\r\n              top: 0,\r\n            }}\r\n          />\r\n          <canvas ref={canvasRef} style={{ display: \"none\" }} />\r\n        </div>\r\n      )}\r\n      {isPhotoTaken && (\r\n        <div\r\n          style={{\r\n            width: \"100%\",\r\n            height: \"88vh\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n            backgroundColor: \"#000716\",\r\n          }}\r\n        >\r\n          <img\r\n            src={photo}\r\n            alt=\"Captured\"\r\n            style={{ width: \"80%\", height: \"auto\" }}\r\n          />\r\n        </div>\r\n      )}\r\n      <div\r\n        className=\"flex jcc aic\"\r\n        style={{\r\n          width: \"100%\",\r\n          gap: 20,\r\n          flexDirection: \"column\",\r\n          height: \"24vh\",\r\n          position: \"absolute\",\r\n          bottom: 0,\r\n          background: \"#000716\",\r\n        }}\r\n      >\r\n        <Button onClick={handleTakePhoto} variant=\"inline-link\" fullWidth>\r\n          <span style={{ color: \"#EAD72F\" }}>\r\n            {isPhotoTaken ? \"RETAKE PHOTO\" : \"TAKE A PHOTO\"}\r\n          </span>\r\n        </Button>\r\n        <div style={{ display: \"flex\", margin: \"0 auto\", width: \"70%\" }}>\r\n          <Button\r\n            disabled={!isCaptured}\r\n            fullWidth\r\n            variant=\"primary\"\r\n            onClick={handleVerifyClick} // Call handleVerifyClick on click\r\n          >\r\n            Verified\r\n          </Button>\r\n        </div>\r\n      </div>\r\n      {visible && (\r\n        <div\r\n          style={{\r\n            position: \"fixed\",\r\n            top: 0,\r\n            left: 0,\r\n            right: 0,\r\n            bottom: 0,\r\n            backgroundColor: \"rgba(0, 0, 0, 0.6)\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n            zIndex: 1000,\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              backgroundColor: \"#fff\",\r\n              padding: \"20px\",\r\n              borderRadius: \"8px\",\r\n              textAlign: \"center\",\r\n              width: \"40%\",\r\n              maxWidth: \"400px\",\r\n            }}\r\n          >\r\n            <Icon name=\"status-positive\" size=\"big\" variant=\"success\" />\r\n            <h3 style={{ color: \"#28a745\" }}>Photo Captured</h3>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VerifiedOrder;\r\n"],"names":["VerifiedOrder","runsheetId","orderId","useParams","navigate","useNavigate","dispatch","useDispatch","visible","setVisible","useState","isCaptured","setIsCaptured","photo","setPhoto","isPhotoTaken","setIsPhotoTaken","videoRef","useRef","canvasRef","startCamera","async","stream","navigator","mediaDevices","getUserMedia","video","facingMode","current","srcObject","err","console","error","useEffect","currentVideoRef","tracks","getTracks","forEach","track","stop","_jsxs","style","display","position","top","left","right","bottom","justifyContent","alignItems","height","flexDirection","backgroundColor","children","width","_jsx","ref","autoPlay","playsInline","src","alt","className","gap","background","Button","onClick","handleTakePhoto","context","getContext","videoWidth","videoHeight","drawImage","photoUrl","toDataURL","setTimeout","variant","fullWidth","color","margin","disabled","blob","fetch","then","res","file","File","type","uploadFile","result","meta","requestStatus","uploadedUrl","payload","concat","encodeURIComponent","alert","zIndex","padding","borderRadius","textAlign","maxWidth","Icon","name","size"],"sourceRoot":""}